// Mocks generated by Mockito 5.4.4 from annotations
// in cosphere/test/mockito_test/usecase_mockito_test/verify_otp/verify_otp_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:cosphere/src/core/domain/entities/user.dart' as _i9;
import 'package:cosphere/src/core/error/failure.dart' as _i5;
import 'package:cosphere/src/features/authentication/data/dto/create_password/create_password_request_dto.dart'
    as _i8;
import 'package:cosphere/src/features/authentication/data/dto/otp/otp_request_dto.dart'
    as _i7;
import 'package:cosphere/src/features/authentication/data/dto/sign_in/sign_in_request_dto.dart'
    as _i10;
import 'package:cosphere/src/features/authentication/data/dto/sign_up/sign_up_request_dto.dart'
    as _i6;
import 'package:cosphere/src/features/authentication/domain/repositories/auth_repository.dart'
    as _i3;
import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i3.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, String>> signup(
          _i6.SignUpRequestDto? signUpDto) =>
      (super.noSuchMethod(
        Invocation.method(
          #signup,
          [signUpDto],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, String>>.value(
            _FakeEither_0<_i5.Failure, String>(
          this,
          Invocation.method(
            #signup,
            [signUpDto],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, String>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, String>> verifyOTP(
          _i7.OtpRequestDto? dto) =>
      (super.noSuchMethod(
        Invocation.method(
          #verifyOTP,
          [dto],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, String>>.value(
            _FakeEither_0<_i5.Failure, String>(
          this,
          Invocation.method(
            #verifyOTP,
            [dto],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, String>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, String>> createPassword(
          _i8.CreatePasswordRequestDto? dto) =>
      (super.noSuchMethod(
        Invocation.method(
          #createPassword,
          [dto],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, String>>.value(
            _FakeEither_0<_i5.Failure, String>(
          this,
          Invocation.method(
            #createPassword,
            [dto],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, String>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i9.User>> signin(
          _i10.SigninRequestDto? dto) =>
      (super.noSuchMethod(
        Invocation.method(
          #signin,
          [dto],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i9.User>>.value(
            _FakeEither_0<_i5.Failure, _i9.User>(
          this,
          Invocation.method(
            #signin,
            [dto],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i9.User>>);
}

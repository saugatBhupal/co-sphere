// Mocks generated by Mockito 5.4.4 from annotations
// in cosphere/test/mockito_test/viewmodel_mockito_test/profile/profile_viewmodel_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:cosphere/src/core/error/failure.dart' as _i6;
import 'package:cosphere/src/features/profile/data/dto/education/add_education_req_dto.dart'
    as _i15;
import 'package:cosphere/src/features/profile/data/dto/experience/add_experience_req_dto.dart'
    as _i18;
import 'package:cosphere/src/features/profile/data/dto/experience/get_experience_res_dto.dart'
    as _i13;
import 'package:cosphere/src/features/profile/data/dto/profile_img/update_profile_imgage_req_dto.dart'
    as _i7;
import 'package:cosphere/src/features/profile/domain/entities/education.dart'
    as _i11;
import 'package:cosphere/src/features/profile/domain/entities/experience.dart'
    as _i17;
import 'package:cosphere/src/features/profile/domain/entities/skill.dart'
    as _i9;
import 'package:cosphere/src/features/profile/domain/repositories/profile_repository.dart'
    as _i2;
import 'package:cosphere/src/features/profile/domain/usecases/add_education_usecase.dart'
    as _i14;
import 'package:cosphere/src/features/profile/domain/usecases/add_experience_usecase.dart'
    as _i16;
import 'package:cosphere/src/features/profile/domain/usecases/add_skill_usecase.dart'
    as _i8;
import 'package:cosphere/src/features/profile/domain/usecases/get_education_by_userID_usecase.dart'
    as _i10;
import 'package:cosphere/src/features/profile/domain/usecases/get_experience_by_userID_usecase.dart'
    as _i12;
import 'package:cosphere/src/features/profile/domain/usecases/update_profile_image_usecase.dart'
    as _i4;
import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeProfileRepository_0 extends _i1.SmartFake
    implements _i2.ProfileRepository {
  _FakeProfileRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [UpdateProfileImageUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateProfileImageUsecase extends _i1.Mock
    implements _i4.UpdateProfileImageUsecase {
  @override
  _i2.ProfileRepository get profileRepository => (super.noSuchMethod(
        Invocation.getter(#profileRepository),
        returnValue: _FakeProfileRepository_0(
          this,
          Invocation.getter(#profileRepository),
        ),
        returnValueForMissingStub: _FakeProfileRepository_0(
          this,
          Invocation.getter(#profileRepository),
        ),
      ) as _i2.ProfileRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, String>> call(
          _i7.UpdateProfileImgageReqDto? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, String>>.value(
            _FakeEither_1<_i6.Failure, String>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, String>>.value(
                _FakeEither_1<_i6.Failure, String>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, String>>);
}

/// A class which mocks [AddSkillUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddSkillUsecase extends _i1.Mock implements _i8.AddSkillUsecase {
  @override
  _i2.ProfileRepository get profileRepository => (super.noSuchMethod(
        Invocation.getter(#profileRepository),
        returnValue: _FakeProfileRepository_0(
          this,
          Invocation.getter(#profileRepository),
        ),
        returnValueForMissingStub: _FakeProfileRepository_0(
          this,
          Invocation.getter(#profileRepository),
        ),
      ) as _i2.ProfileRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i9.Skill>>> call(
          _i8.AddSkillsParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, List<_i9.Skill>>>.value(
            _FakeEither_1<_i6.Failure, List<_i9.Skill>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, List<_i9.Skill>>>.value(
                _FakeEither_1<_i6.Failure, List<_i9.Skill>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, List<_i9.Skill>>>);
}

/// A class which mocks [GetEducationByUserIDUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetEducationByUserIDUsecase extends _i1.Mock
    implements _i10.GetEducationByUserIDUsecase {
  @override
  _i2.ProfileRepository get profileRepository => (super.noSuchMethod(
        Invocation.getter(#profileRepository),
        returnValue: _FakeProfileRepository_0(
          this,
          Invocation.getter(#profileRepository),
        ),
        returnValueForMissingStub: _FakeProfileRepository_0(
          this,
          Invocation.getter(#profileRepository),
        ),
      ) as _i2.ProfileRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i11.Education>>> call(
          String? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, List<_i11.Education>>>.value(
                _FakeEither_1<_i6.Failure, List<_i11.Education>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, List<_i11.Education>>>.value(
                _FakeEither_1<_i6.Failure, List<_i11.Education>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, List<_i11.Education>>>);
}

/// A class which mocks [GetExperienceByUserIDUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetExperienceByUserIDUsecase extends _i1.Mock
    implements _i12.GetExperienceByUserIDUsecase {
  @override
  _i2.ProfileRepository get profileRepository => (super.noSuchMethod(
        Invocation.getter(#profileRepository),
        returnValue: _FakeProfileRepository_0(
          this,
          Invocation.getter(#profileRepository),
        ),
        returnValueForMissingStub: _FakeProfileRepository_0(
          this,
          Invocation.getter(#profileRepository),
        ),
      ) as _i2.ProfileRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i13.GetExperienceResDto>> call(
          String? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, _i13.GetExperienceResDto>>.value(
                _FakeEither_1<_i6.Failure, _i13.GetExperienceResDto>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, _i13.GetExperienceResDto>>.value(
                _FakeEither_1<_i6.Failure, _i13.GetExperienceResDto>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i13.GetExperienceResDto>>);
}

/// A class which mocks [AddEducationUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddEducationUsecase extends _i1.Mock
    implements _i14.AddEducationUsecase {
  @override
  _i2.ProfileRepository get profileRepository => (super.noSuchMethod(
        Invocation.getter(#profileRepository),
        returnValue: _FakeProfileRepository_0(
          this,
          Invocation.getter(#profileRepository),
        ),
        returnValueForMissingStub: _FakeProfileRepository_0(
          this,
          Invocation.getter(#profileRepository),
        ),
      ) as _i2.ProfileRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i11.Education>> call(
          _i15.AddEducationReqDto? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i11.Education>>.value(
            _FakeEither_1<_i6.Failure, _i11.Education>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, _i11.Education>>.value(
                _FakeEither_1<_i6.Failure, _i11.Education>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i11.Education>>);
}

/// A class which mocks [AddExperienceUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddExperienceUsecase extends _i1.Mock
    implements _i16.AddExperienceUsecase {
  @override
  _i2.ProfileRepository get profileRepository => (super.noSuchMethod(
        Invocation.getter(#profileRepository),
        returnValue: _FakeProfileRepository_0(
          this,
          Invocation.getter(#profileRepository),
        ),
        returnValueForMissingStub: _FakeProfileRepository_0(
          this,
          Invocation.getter(#profileRepository),
        ),
      ) as _i2.ProfileRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i17.Experience>> call(
          _i18.AddExperienceReqDto? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i17.Experience>>.value(
            _FakeEither_1<_i6.Failure, _i17.Experience>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, _i17.Experience>>.value(
                _FakeEither_1<_i6.Failure, _i17.Experience>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i17.Experience>>);
}

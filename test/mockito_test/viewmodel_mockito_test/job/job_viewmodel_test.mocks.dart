// Mocks generated by Mockito 5.4.4 from annotations
// in cosphere/test/mockito_test/viewmodel_mockito_test/job/job_viewmodel_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:cosphere/src/core/error/failure.dart' as _i6;
import 'package:cosphere/src/features/jobs/data/dto/apply_job/apply_job_req_dto.dart'
    as _i12;
import 'package:cosphere/src/features/jobs/data/dto/create_job/create_job_req_dto.dart'
    as _i9;
import 'package:cosphere/src/features/jobs/domain/entities/job.dart' as _i7;
import 'package:cosphere/src/features/jobs/domain/repositories/job_repository.dart'
    as _i2;
import 'package:cosphere/src/features/jobs/domain/usecases/apply_to_job_usecase.dart'
    as _i11;
import 'package:cosphere/src/features/jobs/domain/usecases/create_job_usecase.dart'
    as _i8;
import 'package:cosphere/src/features/jobs/domain/usecases/created_job_usecase.dart'
    as _i13;
import 'package:cosphere/src/features/jobs/domain/usecases/get_applied_jobs_usecase.dart'
    as _i4;
import 'package:cosphere/src/features/jobs/domain/usecases/get_explore_jobs_usecase.dart'
    as _i10;
import 'package:cosphere/src/features/jobs/domain/usecases/get_job_by_id_usecase.dart'
    as _i14;
import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeJobRepository_0 extends _i1.SmartFake implements _i2.JobRepository {
  _FakeJobRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetAppliedJobsUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAppliedJobsUsecase extends _i1.Mock
    implements _i4.GetAppliedJobsUsecase {
  @override
  _i2.JobRepository get jobRepository => (super.noSuchMethod(
        Invocation.getter(#jobRepository),
        returnValue: _FakeJobRepository_0(
          this,
          Invocation.getter(#jobRepository),
        ),
        returnValueForMissingStub: _FakeJobRepository_0(
          this,
          Invocation.getter(#jobRepository),
        ),
      ) as _i2.JobRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.Job>>> call(String? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, List<_i7.Job>>>.value(
            _FakeEither_1<_i6.Failure, List<_i7.Job>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, List<_i7.Job>>>.value(
                _FakeEither_1<_i6.Failure, List<_i7.Job>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, List<_i7.Job>>>);
}

/// A class which mocks [CreateJobUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateJobUsecase extends _i1.Mock implements _i8.CreateJobUsecase {
  @override
  _i2.JobRepository get jobRepository => (super.noSuchMethod(
        Invocation.getter(#jobRepository),
        returnValue: _FakeJobRepository_0(
          this,
          Invocation.getter(#jobRepository),
        ),
        returnValueForMissingStub: _FakeJobRepository_0(
          this,
          Invocation.getter(#jobRepository),
        ),
      ) as _i2.JobRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.Job>> call(
          _i9.CreateJobReqDto? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i7.Job>>.value(
            _FakeEither_1<_i6.Failure, _i7.Job>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, _i7.Job>>.value(
                _FakeEither_1<_i6.Failure, _i7.Job>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i7.Job>>);
}

/// A class which mocks [GetExploreJobsUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetExploreJobsUsecase extends _i1.Mock
    implements _i10.GetExploreJobsUsecase {
  @override
  _i2.JobRepository get jobRepository => (super.noSuchMethod(
        Invocation.getter(#jobRepository),
        returnValue: _FakeJobRepository_0(
          this,
          Invocation.getter(#jobRepository),
        ),
        returnValueForMissingStub: _FakeJobRepository_0(
          this,
          Invocation.getter(#jobRepository),
        ),
      ) as _i2.JobRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.Job>>> call(String? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, List<_i7.Job>>>.value(
            _FakeEither_1<_i6.Failure, List<_i7.Job>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, List<_i7.Job>>>.value(
                _FakeEither_1<_i6.Failure, List<_i7.Job>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, List<_i7.Job>>>);
}

/// A class which mocks [ApplyToJobUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockApplyToJobUsecase extends _i1.Mock implements _i11.ApplyToJobUsecase {
  @override
  _i2.JobRepository get jobRepository => (super.noSuchMethod(
        Invocation.getter(#jobRepository),
        returnValue: _FakeJobRepository_0(
          this,
          Invocation.getter(#jobRepository),
        ),
        returnValueForMissingStub: _FakeJobRepository_0(
          this,
          Invocation.getter(#jobRepository),
        ),
      ) as _i2.JobRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.Job>> call(
          _i12.ApplyJobReqDto? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i7.Job>>.value(
            _FakeEither_1<_i6.Failure, _i7.Job>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, _i7.Job>>.value(
                _FakeEither_1<_i6.Failure, _i7.Job>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i7.Job>>);
}

/// A class which mocks [CreatedJobUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreatedJobUsecase extends _i1.Mock implements _i13.CreatedJobUsecase {
  @override
  _i2.JobRepository get jobRepository => (super.noSuchMethod(
        Invocation.getter(#jobRepository),
        returnValue: _FakeJobRepository_0(
          this,
          Invocation.getter(#jobRepository),
        ),
        returnValueForMissingStub: _FakeJobRepository_0(
          this,
          Invocation.getter(#jobRepository),
        ),
      ) as _i2.JobRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.Job>>> call(String? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, List<_i7.Job>>>.value(
            _FakeEither_1<_i6.Failure, List<_i7.Job>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, List<_i7.Job>>>.value(
                _FakeEither_1<_i6.Failure, List<_i7.Job>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, List<_i7.Job>>>);
}

/// A class which mocks [GetJobByIdUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetJobByIdUsecase extends _i1.Mock implements _i14.GetJobByIdUsecase {
  @override
  _i2.JobRepository get jobRepository => (super.noSuchMethod(
        Invocation.getter(#jobRepository),
        returnValue: _FakeJobRepository_0(
          this,
          Invocation.getter(#jobRepository),
        ),
        returnValueForMissingStub: _FakeJobRepository_0(
          this,
          Invocation.getter(#jobRepository),
        ),
      ) as _i2.JobRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.Job>> call(String? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i7.Job>>.value(
            _FakeEither_1<_i6.Failure, _i7.Job>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, _i7.Job>>.value(
                _FakeEither_1<_i6.Failure, _i7.Job>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i7.Job>>);
}

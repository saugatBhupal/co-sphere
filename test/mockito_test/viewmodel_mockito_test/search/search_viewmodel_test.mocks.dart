// Mocks generated by Mockito 5.4.4 from annotations
// in cosphere/test/mockito_test/viewmodel_mockito_test/search/search_viewmodel_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:cosphere/src/core/domain/entities/user.dart' as _i15;
import 'package:cosphere/src/core/error/failure.dart' as _i6;
import 'package:cosphere/src/features/jobs/domain/entities/job.dart' as _i9;
import 'package:cosphere/src/features/project/domain/entities/project.dart'
    as _i11;
import 'package:cosphere/src/features/search/data/dto/add_search_history_req_dto/add_search_history_req_dto.dart'
    as _i7;
import 'package:cosphere/src/features/search/domain/entities/search.dart'
    as _i13;
import 'package:cosphere/src/features/search/domain/repositories/search_repository.dart'
    as _i2;
import 'package:cosphere/src/features/search/domain/usecases/add_search_history_usecase.dart'
    as _i4;
import 'package:cosphere/src/features/search/domain/usecases/get_jobs_by_name_usecase.dart'
    as _i8;
import 'package:cosphere/src/features/search/domain/usecases/get_project_by_name_usecase.dart'
    as _i10;
import 'package:cosphere/src/features/search/domain/usecases/get_search_history_usecase.dart'
    as _i12;
import 'package:cosphere/src/features/search/domain/usecases/get_users_by_name_usecase.dart'
    as _i14;
import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSearchRepository_0 extends _i1.SmartFake
    implements _i2.SearchRepository {
  _FakeSearchRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AddSearchHistoryUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddSearchHistoryUsecase extends _i1.Mock
    implements _i4.AddSearchHistoryUsecase {
  @override
  _i2.SearchRepository get searchRepository => (super.noSuchMethod(
        Invocation.getter(#searchRepository),
        returnValue: _FakeSearchRepository_0(
          this,
          Invocation.getter(#searchRepository),
        ),
        returnValueForMissingStub: _FakeSearchRepository_0(
          this,
          Invocation.getter(#searchRepository),
        ),
      ) as _i2.SearchRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, void>> call(
          _i7.AddSearchHistoryReqDto? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, void>>.value(
            _FakeEither_1<_i6.Failure, void>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, void>>.value(
                _FakeEither_1<_i6.Failure, void>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, void>>);
}

/// A class which mocks [GetJobsByNameUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetJobsByNameUsecase extends _i1.Mock
    implements _i8.GetJobsByNameUsecase {
  @override
  _i2.SearchRepository get searchRepository => (super.noSuchMethod(
        Invocation.getter(#searchRepository),
        returnValue: _FakeSearchRepository_0(
          this,
          Invocation.getter(#searchRepository),
        ),
        returnValueForMissingStub: _FakeSearchRepository_0(
          this,
          Invocation.getter(#searchRepository),
        ),
      ) as _i2.SearchRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i9.Job>>> call(String? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, List<_i9.Job>>>.value(
            _FakeEither_1<_i6.Failure, List<_i9.Job>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, List<_i9.Job>>>.value(
                _FakeEither_1<_i6.Failure, List<_i9.Job>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, List<_i9.Job>>>);
}

/// A class which mocks [GetProjectByNameUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetProjectByNameUsecase extends _i1.Mock
    implements _i10.GetProjectByNameUsecase {
  @override
  _i2.SearchRepository get searchRepository => (super.noSuchMethod(
        Invocation.getter(#searchRepository),
        returnValue: _FakeSearchRepository_0(
          this,
          Invocation.getter(#searchRepository),
        ),
        returnValueForMissingStub: _FakeSearchRepository_0(
          this,
          Invocation.getter(#searchRepository),
        ),
      ) as _i2.SearchRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i11.Project>>> call(
          String? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, List<_i11.Project>>>.value(
                _FakeEither_1<_i6.Failure, List<_i11.Project>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, List<_i11.Project>>>.value(
                _FakeEither_1<_i6.Failure, List<_i11.Project>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, List<_i11.Project>>>);
}

/// A class which mocks [GetSearchHistoryUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetSearchHistoryUsecase extends _i1.Mock
    implements _i12.GetSearchHistoryUsecase {
  @override
  _i2.SearchRepository get searchRepository => (super.noSuchMethod(
        Invocation.getter(#searchRepository),
        returnValue: _FakeSearchRepository_0(
          this,
          Invocation.getter(#searchRepository),
        ),
        returnValueForMissingStub: _FakeSearchRepository_0(
          this,
          Invocation.getter(#searchRepository),
        ),
      ) as _i2.SearchRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i13.Search>>> call(String? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, List<_i13.Search>>>.value(
                _FakeEither_1<_i6.Failure, List<_i13.Search>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, List<_i13.Search>>>.value(
                _FakeEither_1<_i6.Failure, List<_i13.Search>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, List<_i13.Search>>>);
}

/// A class which mocks [GetUsersByNameUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetUsersByNameUsecase extends _i1.Mock
    implements _i14.GetUsersByNameUsecase {
  @override
  _i2.SearchRepository get searchRepository => (super.noSuchMethod(
        Invocation.getter(#searchRepository),
        returnValue: _FakeSearchRepository_0(
          this,
          Invocation.getter(#searchRepository),
        ),
        returnValueForMissingStub: _FakeSearchRepository_0(
          this,
          Invocation.getter(#searchRepository),
        ),
      ) as _i2.SearchRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i15.User>>> call(String? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, List<_i15.User>>>.value(
            _FakeEither_1<_i6.Failure, List<_i15.User>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, List<_i15.User>>>.value(
                _FakeEither_1<_i6.Failure, List<_i15.User>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, List<_i15.User>>>);
}

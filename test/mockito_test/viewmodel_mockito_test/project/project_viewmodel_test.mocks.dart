// Mocks generated by Mockito 5.4.4 from annotations
// in cosphere/test/mockito_test/viewmodel_mockito_test/project/project_viewmodel_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:cosphere/src/core/error/failure.dart' as _i6;
import 'package:cosphere/src/features/jobs/domain/entities/applicants.dart'
    as _i30;
import 'package:cosphere/src/features/profile/domain/entities/reviews.dart'
    as _i7;
import 'package:cosphere/src/features/project/data/dto/add_review/add_review_req_dto.dart'
    as _i8;
import 'package:cosphere/src/features/project/data/dto/apply_project/apply_project_req_dto.dart'
    as _i11;
import 'package:cosphere/src/features/project/data/dto/complete_project/complete_project_req_dto.dart'
    as _i13;
import 'package:cosphere/src/features/project/data/dto/create_project/create_project_req_dto.dart'
    as _i17;
import 'package:cosphere/src/features/project/data/dto/create_task/create_task_req_dto.dart'
    as _i19;
import 'package:cosphere/src/features/project/data/dto/hire_user/hire_user_req_dto.dart'
    as _i31;
import 'package:cosphere/src/features/project/domain/entities/project.dart'
    as _i10;
import 'package:cosphere/src/features/project/domain/entities/tasks.dart'
    as _i15;
import 'package:cosphere/src/features/project/domain/repositories/project_repository.dart'
    as _i2;
import 'package:cosphere/src/features/project/domain/usecases/add_review_usecase.dart'
    as _i4;
import 'package:cosphere/src/features/project/domain/usecases/apply_to_project_usecase.dart'
    as _i9;
import 'package:cosphere/src/features/project/domain/usecases/complete_project_usecse.dart'
    as _i12;
import 'package:cosphere/src/features/project/domain/usecases/complete_task_usecase.dart'
    as _i14;
import 'package:cosphere/src/features/project/domain/usecases/create_project_usecase.dart'
    as _i16;
import 'package:cosphere/src/features/project/domain/usecases/create_task_usecase.dart'
    as _i18;
import 'package:cosphere/src/features/project/domain/usecases/finish_hiring_usecase.dart'
    as _i20;
import 'package:cosphere/src/features/project/domain/usecases/get_active_project_user_usecase.dart'
    as _i21;
import 'package:cosphere/src/features/project/domain/usecases/get_applied_projects_usecase.dart'
    as _i22;
import 'package:cosphere/src/features/project/domain/usecases/get_completed_project_user_usecase.dart'
    as _i23;
import 'package:cosphere/src/features/project/domain/usecases/get_explore_project_usecase.dart'
    as _i24;
import 'package:cosphere/src/features/project/domain/usecases/get_hiring_projects_user_usecase.dart'
    as _i25;
import 'package:cosphere/src/features/project/domain/usecases/get_project_by_id_usecase.dart'
    as _i26;
import 'package:cosphere/src/features/project/domain/usecases/get_projects_user_usecase.dart'
    as _i27;
import 'package:cosphere/src/features/project/domain/usecases/get_review_by_id_usecase.dart'
    as _i28;
import 'package:cosphere/src/features/project/domain/usecases/hire_user_usecase.dart'
    as _i29;
import 'package:cosphere/src/features/project/domain/usecases/reject_user_usecase.dart'
    as _i32;
import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeProjectRepository_0 extends _i1.SmartFake
    implements _i2.ProjectRepository {
  _FakeProjectRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AddReviewUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddReviewUsecase extends _i1.Mock implements _i4.AddReviewUsecase {
  @override
  _i2.ProjectRepository get projectRepository => (super.noSuchMethod(
        Invocation.getter(#projectRepository),
        returnValue: _FakeProjectRepository_0(
          this,
          Invocation.getter(#projectRepository),
        ),
        returnValueForMissingStub: _FakeProjectRepository_0(
          this,
          Invocation.getter(#projectRepository),
        ),
      ) as _i2.ProjectRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.Reviews>>> call(
          _i8.AddReviewReqDto? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, List<_i7.Reviews>>>.value(
                _FakeEither_1<_i6.Failure, List<_i7.Reviews>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, List<_i7.Reviews>>>.value(
                _FakeEither_1<_i6.Failure, List<_i7.Reviews>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, List<_i7.Reviews>>>);
}

/// A class which mocks [ApplyToProjectUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockApplyToProjectUsecase extends _i1.Mock
    implements _i9.ApplyToProjectUsecase {
  @override
  _i2.ProjectRepository get projectRepository => (super.noSuchMethod(
        Invocation.getter(#projectRepository),
        returnValue: _FakeProjectRepository_0(
          this,
          Invocation.getter(#projectRepository),
        ),
        returnValueForMissingStub: _FakeProjectRepository_0(
          this,
          Invocation.getter(#projectRepository),
        ),
      ) as _i2.ProjectRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i10.Project>> call(
          _i11.ApplyProjectReqDto? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i10.Project>>.value(
            _FakeEither_1<_i6.Failure, _i10.Project>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, _i10.Project>>.value(
                _FakeEither_1<_i6.Failure, _i10.Project>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i10.Project>>);
}

/// A class which mocks [CompleteProjectUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCompleteProjectUsecase extends _i1.Mock
    implements _i12.CompleteProjectUsecase {
  @override
  _i2.ProjectRepository get projectRepository => (super.noSuchMethod(
        Invocation.getter(#projectRepository),
        returnValue: _FakeProjectRepository_0(
          this,
          Invocation.getter(#projectRepository),
        ),
        returnValueForMissingStub: _FakeProjectRepository_0(
          this,
          Invocation.getter(#projectRepository),
        ),
      ) as _i2.ProjectRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, String>> call(
          _i13.CompleteProjectReqDto? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, String>>.value(
            _FakeEither_1<_i6.Failure, String>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, String>>.value(
                _FakeEither_1<_i6.Failure, String>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, String>>);
}

/// A class which mocks [CompleteTaskUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCompleteTaskUsecase extends _i1.Mock
    implements _i14.CompleteTaskUsecase {
  @override
  _i2.ProjectRepository get projectRepository => (super.noSuchMethod(
        Invocation.getter(#projectRepository),
        returnValue: _FakeProjectRepository_0(
          this,
          Invocation.getter(#projectRepository),
        ),
        returnValueForMissingStub: _FakeProjectRepository_0(
          this,
          Invocation.getter(#projectRepository),
        ),
      ) as _i2.ProjectRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i15.Tasks>> call(
          _i14.CompleteTaskParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i15.Tasks>>.value(
            _FakeEither_1<_i6.Failure, _i15.Tasks>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, _i15.Tasks>>.value(
                _FakeEither_1<_i6.Failure, _i15.Tasks>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i15.Tasks>>);
}

/// A class which mocks [CreateProjectUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateProjectUsecase extends _i1.Mock
    implements _i16.CreateProjectUsecase {
  @override
  _i2.ProjectRepository get projectRepository => (super.noSuchMethod(
        Invocation.getter(#projectRepository),
        returnValue: _FakeProjectRepository_0(
          this,
          Invocation.getter(#projectRepository),
        ),
        returnValueForMissingStub: _FakeProjectRepository_0(
          this,
          Invocation.getter(#projectRepository),
        ),
      ) as _i2.ProjectRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i10.Project>> call(
          _i17.CreateProjectReqDto? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i10.Project>>.value(
            _FakeEither_1<_i6.Failure, _i10.Project>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, _i10.Project>>.value(
                _FakeEither_1<_i6.Failure, _i10.Project>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i10.Project>>);
}

/// A class which mocks [CreateTaskUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateTaskUsecase extends _i1.Mock implements _i18.CreateTaskUsecase {
  @override
  _i2.ProjectRepository get projectRepository => (super.noSuchMethod(
        Invocation.getter(#projectRepository),
        returnValue: _FakeProjectRepository_0(
          this,
          Invocation.getter(#projectRepository),
        ),
        returnValueForMissingStub: _FakeProjectRepository_0(
          this,
          Invocation.getter(#projectRepository),
        ),
      ) as _i2.ProjectRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i15.Tasks>> call(
          _i19.CreateTaskReqDto? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i15.Tasks>>.value(
            _FakeEither_1<_i6.Failure, _i15.Tasks>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, _i15.Tasks>>.value(
                _FakeEither_1<_i6.Failure, _i15.Tasks>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i15.Tasks>>);
}

/// A class which mocks [FinishHiringUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockFinishHiringUsecase extends _i1.Mock
    implements _i20.FinishHiringUsecase {
  @override
  _i2.ProjectRepository get projectRepository => (super.noSuchMethod(
        Invocation.getter(#projectRepository),
        returnValue: _FakeProjectRepository_0(
          this,
          Invocation.getter(#projectRepository),
        ),
        returnValueForMissingStub: _FakeProjectRepository_0(
          this,
          Invocation.getter(#projectRepository),
        ),
      ) as _i2.ProjectRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, String>> call(String? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, String>>.value(
            _FakeEither_1<_i6.Failure, String>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, String>>.value(
                _FakeEither_1<_i6.Failure, String>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, String>>);
}

/// A class which mocks [GetActiveProjectUserUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetActiveProjectUserUsecase extends _i1.Mock
    implements _i21.GetActiveProjectUserUsecase {
  @override
  _i2.ProjectRepository get projectRepository => (super.noSuchMethod(
        Invocation.getter(#projectRepository),
        returnValue: _FakeProjectRepository_0(
          this,
          Invocation.getter(#projectRepository),
        ),
        returnValueForMissingStub: _FakeProjectRepository_0(
          this,
          Invocation.getter(#projectRepository),
        ),
      ) as _i2.ProjectRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i10.Project>>> call(
          String? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, List<_i10.Project>>>.value(
                _FakeEither_1<_i6.Failure, List<_i10.Project>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, List<_i10.Project>>>.value(
                _FakeEither_1<_i6.Failure, List<_i10.Project>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, List<_i10.Project>>>);
}

/// A class which mocks [GetAppliedProjectsUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAppliedProjectsUsecase extends _i1.Mock
    implements _i22.GetAppliedProjectsUsecase {
  @override
  _i2.ProjectRepository get projectRepository => (super.noSuchMethod(
        Invocation.getter(#projectRepository),
        returnValue: _FakeProjectRepository_0(
          this,
          Invocation.getter(#projectRepository),
        ),
        returnValueForMissingStub: _FakeProjectRepository_0(
          this,
          Invocation.getter(#projectRepository),
        ),
      ) as _i2.ProjectRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i10.Project>>> call(
          String? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, List<_i10.Project>>>.value(
                _FakeEither_1<_i6.Failure, List<_i10.Project>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, List<_i10.Project>>>.value(
                _FakeEither_1<_i6.Failure, List<_i10.Project>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, List<_i10.Project>>>);
}

/// A class which mocks [GetCompletedProjectUserUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCompletedProjectUserUsecase extends _i1.Mock
    implements _i23.GetCompletedProjectUserUsecase {
  @override
  _i2.ProjectRepository get projectRepository => (super.noSuchMethod(
        Invocation.getter(#projectRepository),
        returnValue: _FakeProjectRepository_0(
          this,
          Invocation.getter(#projectRepository),
        ),
        returnValueForMissingStub: _FakeProjectRepository_0(
          this,
          Invocation.getter(#projectRepository),
        ),
      ) as _i2.ProjectRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i10.Project>>> call(
          String? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, List<_i10.Project>>>.value(
                _FakeEither_1<_i6.Failure, List<_i10.Project>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, List<_i10.Project>>>.value(
                _FakeEither_1<_i6.Failure, List<_i10.Project>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, List<_i10.Project>>>);
}

/// A class which mocks [GetExploreProjectUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetExploreProjectUsecase extends _i1.Mock
    implements _i24.GetExploreProjectUsecase {
  @override
  _i2.ProjectRepository get projectRepository => (super.noSuchMethod(
        Invocation.getter(#projectRepository),
        returnValue: _FakeProjectRepository_0(
          this,
          Invocation.getter(#projectRepository),
        ),
        returnValueForMissingStub: _FakeProjectRepository_0(
          this,
          Invocation.getter(#projectRepository),
        ),
      ) as _i2.ProjectRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i10.Project>>> call(
          String? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, List<_i10.Project>>>.value(
                _FakeEither_1<_i6.Failure, List<_i10.Project>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, List<_i10.Project>>>.value(
                _FakeEither_1<_i6.Failure, List<_i10.Project>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, List<_i10.Project>>>);
}

/// A class which mocks [GetHiringProjectsUserUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetHiringProjectsUserUsecase extends _i1.Mock
    implements _i25.GetHiringProjectsUserUsecase {
  @override
  _i2.ProjectRepository get projectRepository => (super.noSuchMethod(
        Invocation.getter(#projectRepository),
        returnValue: _FakeProjectRepository_0(
          this,
          Invocation.getter(#projectRepository),
        ),
        returnValueForMissingStub: _FakeProjectRepository_0(
          this,
          Invocation.getter(#projectRepository),
        ),
      ) as _i2.ProjectRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i10.Project>>> call(
          String? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, List<_i10.Project>>>.value(
                _FakeEither_1<_i6.Failure, List<_i10.Project>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, List<_i10.Project>>>.value(
                _FakeEither_1<_i6.Failure, List<_i10.Project>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, List<_i10.Project>>>);
}

/// A class which mocks [GetProjectByIdUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetProjectByIdUsecase extends _i1.Mock
    implements _i26.GetProjectByIdUsecase {
  @override
  _i2.ProjectRepository get projectRepository => (super.noSuchMethod(
        Invocation.getter(#projectRepository),
        returnValue: _FakeProjectRepository_0(
          this,
          Invocation.getter(#projectRepository),
        ),
        returnValueForMissingStub: _FakeProjectRepository_0(
          this,
          Invocation.getter(#projectRepository),
        ),
      ) as _i2.ProjectRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i10.Project>> call(String? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i10.Project>>.value(
            _FakeEither_1<_i6.Failure, _i10.Project>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, _i10.Project>>.value(
                _FakeEither_1<_i6.Failure, _i10.Project>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i10.Project>>);
}

/// A class which mocks [GetProjectsUserUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetProjectsUserUsecase extends _i1.Mock
    implements _i27.GetProjectsUserUsecase {
  @override
  _i2.ProjectRepository get projectRepository => (super.noSuchMethod(
        Invocation.getter(#projectRepository),
        returnValue: _FakeProjectRepository_0(
          this,
          Invocation.getter(#projectRepository),
        ),
        returnValueForMissingStub: _FakeProjectRepository_0(
          this,
          Invocation.getter(#projectRepository),
        ),
      ) as _i2.ProjectRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i10.Project>>> call(
          String? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, List<_i10.Project>>>.value(
                _FakeEither_1<_i6.Failure, List<_i10.Project>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, List<_i10.Project>>>.value(
                _FakeEither_1<_i6.Failure, List<_i10.Project>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, List<_i10.Project>>>);
}

/// A class which mocks [GetReviewByIdUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetReviewByIdUsecase extends _i1.Mock
    implements _i28.GetReviewByIdUsecase {
  @override
  _i2.ProjectRepository get projectRepository => (super.noSuchMethod(
        Invocation.getter(#projectRepository),
        returnValue: _FakeProjectRepository_0(
          this,
          Invocation.getter(#projectRepository),
        ),
        returnValueForMissingStub: _FakeProjectRepository_0(
          this,
          Invocation.getter(#projectRepository),
        ),
      ) as _i2.ProjectRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.Reviews>> call(String? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i7.Reviews>>.value(
            _FakeEither_1<_i6.Failure, _i7.Reviews>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, _i7.Reviews>>.value(
                _FakeEither_1<_i6.Failure, _i7.Reviews>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i7.Reviews>>);
}

/// A class which mocks [HireUserUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockHireUserUsecase extends _i1.Mock implements _i29.HireUserUsecase {
  @override
  _i2.ProjectRepository get projectRepository => (super.noSuchMethod(
        Invocation.getter(#projectRepository),
        returnValue: _FakeProjectRepository_0(
          this,
          Invocation.getter(#projectRepository),
        ),
        returnValueForMissingStub: _FakeProjectRepository_0(
          this,
          Invocation.getter(#projectRepository),
        ),
      ) as _i2.ProjectRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i30.Applicants>> call(
          _i31.HireUserReqDto? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i30.Applicants>>.value(
            _FakeEither_1<_i6.Failure, _i30.Applicants>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, _i30.Applicants>>.value(
                _FakeEither_1<_i6.Failure, _i30.Applicants>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i30.Applicants>>);
}

/// A class which mocks [RejectUserUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockRejectUserUsecase extends _i1.Mock implements _i32.RejectUserUsecase {
  @override
  _i2.ProjectRepository get projectRepository => (super.noSuchMethod(
        Invocation.getter(#projectRepository),
        returnValue: _FakeProjectRepository_0(
          this,
          Invocation.getter(#projectRepository),
        ),
        returnValueForMissingStub: _FakeProjectRepository_0(
          this,
          Invocation.getter(#projectRepository),
        ),
      ) as _i2.ProjectRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i30.Applicants>> call(
          _i31.HireUserReqDto? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i30.Applicants>>.value(
            _FakeEither_1<_i6.Failure, _i30.Applicants>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, _i30.Applicants>>.value(
                _FakeEither_1<_i6.Failure, _i30.Applicants>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i30.Applicants>>);
}

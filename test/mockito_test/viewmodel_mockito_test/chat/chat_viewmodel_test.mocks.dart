// Mocks generated by Mockito 5.4.4 from annotations
// in cosphere/test/mockito_test/viewmodel_mockito_test/chat/chat_viewmodel_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:cosphere/src/core/error/failure.dart' as _i6;
import 'package:cosphere/src/features/chat/data/dto/send_message_request_dto.dart'
    as _i12;
import 'package:cosphere/src/features/chat/domain/entities/conversation.dart'
    as _i7;
import 'package:cosphere/src/features/chat/domain/entities/message.dart'
    as _i10;
import 'package:cosphere/src/features/chat/domain/repositories/chat_repository.dart'
    as _i2;
import 'package:cosphere/src/features/chat/domain/usecases/get_all_conversation_usecase.dart'
    as _i8;
import 'package:cosphere/src/features/chat/domain/usecases/get_conversation_usecase.dart'
    as _i4;
import 'package:cosphere/src/features/chat/domain/usecases/get_messages_from_conversation_usecase.dart'
    as _i9;
import 'package:cosphere/src/features/chat/domain/usecases/send_message_usecase.dart'
    as _i11;
import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeChatRepository_0 extends _i1.SmartFake
    implements _i2.ChatRepository {
  _FakeChatRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetConversationUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetConversationUsecase extends _i1.Mock
    implements _i4.GetConversationUsecase {
  @override
  _i2.ChatRepository get chatRepository => (super.noSuchMethod(
        Invocation.getter(#chatRepository),
        returnValue: _FakeChatRepository_0(
          this,
          Invocation.getter(#chatRepository),
        ),
        returnValueForMissingStub: _FakeChatRepository_0(
          this,
          Invocation.getter(#chatRepository),
        ),
      ) as _i2.ChatRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.Conversation>> call(
          List<String>? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, _i7.Conversation>>.value(
                _FakeEither_1<_i6.Failure, _i7.Conversation>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, _i7.Conversation>>.value(
                _FakeEither_1<_i6.Failure, _i7.Conversation>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i7.Conversation>>);
}

/// A class which mocks [GetAllConversationUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllConversationUsecase extends _i1.Mock
    implements _i8.GetAllConversationUsecase {
  @override
  _i2.ChatRepository get chatRepository => (super.noSuchMethod(
        Invocation.getter(#chatRepository),
        returnValue: _FakeChatRepository_0(
          this,
          Invocation.getter(#chatRepository),
        ),
        returnValueForMissingStub: _FakeChatRepository_0(
          this,
          Invocation.getter(#chatRepository),
        ),
      ) as _i2.ChatRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.Conversation>>> call(
          String? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, List<_i7.Conversation>>>.value(
                _FakeEither_1<_i6.Failure, List<_i7.Conversation>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, List<_i7.Conversation>>>.value(
                _FakeEither_1<_i6.Failure, List<_i7.Conversation>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, List<_i7.Conversation>>>);
}

/// A class which mocks [GetMessagesFromConversationUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetMessagesFromConversationUsecase extends _i1.Mock
    implements _i9.GetMessagesFromConversationUsecase {
  @override
  _i2.ChatRepository get chatRepository => (super.noSuchMethod(
        Invocation.getter(#chatRepository),
        returnValue: _FakeChatRepository_0(
          this,
          Invocation.getter(#chatRepository),
        ),
        returnValueForMissingStub: _FakeChatRepository_0(
          this,
          Invocation.getter(#chatRepository),
        ),
      ) as _i2.ChatRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i10.Message>>> call(
          String? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, List<_i10.Message>>>.value(
                _FakeEither_1<_i6.Failure, List<_i10.Message>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, List<_i10.Message>>>.value(
                _FakeEither_1<_i6.Failure, List<_i10.Message>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, List<_i10.Message>>>);
}

/// A class which mocks [SendMessageUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSendMessageUsecase extends _i1.Mock
    implements _i11.SendMessageUsecase {
  @override
  _i2.ChatRepository get chatRepository => (super.noSuchMethod(
        Invocation.getter(#chatRepository),
        returnValue: _FakeChatRepository_0(
          this,
          Invocation.getter(#chatRepository),
        ),
        returnValueForMissingStub: _FakeChatRepository_0(
          this,
          Invocation.getter(#chatRepository),
        ),
      ) as _i2.ChatRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i10.Message>> call(
          _i12.SendMessageRequestDto? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i10.Message>>.value(
            _FakeEither_1<_i6.Failure, _i10.Message>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, _i10.Message>>.value(
                _FakeEither_1<_i6.Failure, _i10.Message>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i10.Message>>);
}
